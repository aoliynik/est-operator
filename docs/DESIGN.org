#+TITLE: EST Operator Design
#+AUTHOR: Timothy J. Miller
#+STARTUP: inlineimages
#+NAME: caption_wrap
#+BEGIN_SRC sh :var text="" :var data=""" :results output silent :exports none
echo "#+CAPTION: $text"
echo "$data"
#+END_SRC

* Concept
This operator is implemented as [[https://cert-manager.io/docs/configuration/external/][an External issuer type]] for [[https://cert-manager.io/][cert-manager]].  In accordance with the documentation, we define a new Issuer type and a controller that watches the ~CertificateRequest~ resource and implements the [[https://tools.ietf.org/html/rfc7030][RFC 7030 interface]].  The controller communucates back to ~cert-manager~ via the ~CertificateRequest~ resource status and conditions fields.
* Custom Resources
~est-operator~ includes three custom resources: ~EstIssuer~, ~EstClusterIssuer~, and ~EstOrder~.  In addition, the ~CertificateRequest~ resource from [[https://cert-manager.io/][cert-manager]] is used in the certificate issuance process, Kubernetes ~Secret~ resources of type =kubernetes.io/basic-auth= are used.
#+BEGIN_SRC plantuml :file images/classes.png :cache yes :results drawer :post caption_wrap("~est-operator~ resources", *this*)
skinparam linetype ortho
mainframe **class** est-operator
package "est.mitre.org/v1alpha1" {
    class EstIssuer {
        #host : string
        port : integer [1..65535]
        label : string
        #cacert : base64 string
        secretName : string
    }
    class EstClusterIssuer {
        #host : string
        port : integer [1..65535]
        label : string
        #cacert : base64 string
        secretName : string
    }
    class EstOrder {
        #issuerRef : object
        #request : base64 string
    }
}
package "cert-manager.io/v1" {
    class CertificateRequest {
        request : base64 string    
    }
}
   
package v1 {
    class Secret {
        type : kubernetes.io/basic-auth    
    }
}
CertificateRequest "1" *--> "*" EstOrder
EstIssuer <.. EstOrder 
EstClusterIssuer <.. EstOrder 
EstIssuer ..> Secret 
EstClusterIssuer ..> Secret 
#+END_SRC

#+RESULTS[954c880066fff788517b2ad59a4f5464c320ac0a]:
:results:
#+CAPTION: ~est-operator~ resources
[[file:images/classes.png]]
:end:

** EstIssuer and EstClusterIssuer resources
These resources describe an certificate enrollment portal that supports the [[https://tools.ietf.org/html/rfc7030][RFC 7030 Enrollment over Secure Transport]] interface.  Both resources have the same attributes, but ~EstIssuer~ is namespace scoped and ~EstClusterIssuer~ is cluster scoped.
- *host*: (required) DNS name of the portal.
- *port*: Port number of the portal; default: 443.
- *label*: Interface label [[https://tools.ietf.org/html/rfc7030#section-3.2.2][as described in RFC 7030 Sec. 3.2.2]].  Labels are added to the "well-known" path to enable one portal to support multiple issuers.
- *cacert*: (required) The root certificate the portal issues under.  The certificate must be in PEM encoding, and then base64 encoded.
- *secretName*: The name of a Secret holding the EST Portal credential.  ~est-operator~ supports HTTP Basic Authentication for initial enrollment.
** EstOrder resources
This resource tracks a single certificate request through the RFC 7030 lifecycle.  ~EstOrder~ is created by the operator and is not deployed by users.
- *issuerRef*: (required) An issuer object reference as per [[https://cert-manager.io/docs/usage/certificate/#creating-certificate-resources][cert-manager documentation]].
  + *name*: (required) The name of the issuer resource.
  + *kind*: (required) Must be either "EstIssuer" or "EstClusterIssuer".
  + *group*: (required) Must be "est.mitre.org".
- *request*: (required) The signed PKCS#10 request in PEM encoding, and then base64 encoded.  This value is automatically generated by ~cert-manager~ and is copied from the ~CertificateRequest~.
* Behavior
The following sequence diagrams describe the behavior of ~est-operator~ for each of its managed resources.
** EstIssuer and EstClusterIssuer activity
#+BEGIN_QUOTE
*Note:* EstClusterIssuer activity is identical to EstIssuer.
#+END_QUOTE
#+BEGIN_SRC plantuml :file images/act-estissuer.png :cache yes :results drawer :post caption_wrap("~EstIssuer~ / ~EstClusterIssuer~ activity", *this*)
hide footbox
autonumber
mainframe **act** estissuer_create [EstIssuer]
actor User
control "est-operator" as estoperator
participant EstIssuer
participant Secret
database "EST Portal" as estportal
User -> EstIssuer : create
User -> Secret : create
estoperator -> EstIssuer : read
estoperator -> Secret : read
estoperator -> estoperator : validate secret
estoperator -> estportal : /cacerts
estoperator -> estoperator : validate cacert
estoperator -> EstIssuer : update status
#+END_SRC

#+RESULTS[f338dbc8ca0b45d8ba737d202bab4174d74c568e]:
:results:
#+CAPTION: ~EstIssuer~ / ~EstClusterIssuer~ activity
[[file:images/act-estissuer.png]]
:end:

1. The user deploys an issuer resource with the EST Portal host, port, label, trust anchor, and credential reference.
2. The user deploys a Secret holding the credential needed to access the EST Portal.
3. The operator reads the issuer details.
4. The operator reads the Secret
5. The operator validates that the Secret is present and is the correct Secret type (currently ~kubernetes.io/basic-auth~).
6. Call the ~/cacerts~ API to retrieve the portal's trust anchor.
7. The operator validates that the configured trust anchor is the same as the portal's trust anchor.
8. Mark the issuer as ready to service requests.  
** CertificateRequest activity
#+BEGIN_SRC plantuml :file images/act-certificaterequest.png :cache yes :results drawer :post caption_wrap("~CertificateRequest~ activity", *this*)
hide footbox
autonumber
mainframe **act** estissuer_certrequest_handler [EstOrder]
actor User
control "cert-manager" as certmgr
control "est-operator" as estoperator
User -> Certificate : create
certmgr -> CertificateRequest : create
estoperator -> CertificateRequest : read
estoperator -> EstIssuer : read
estoperator -> EstOrder : create
estoperator -> CertificateRequest : update status
#+END_SRC
#+RESULTS[bf83d651ef5be3d38ba99ca27316e06bf4e00c68]:
:results:
#+CAPTION: ~CertificateRequest~ activity
[[file:images/act-certificaterequest.png]]
:end:

1. The user deploys a ~cert-manager~ Certificate resource with an ~issuerRef~ with group ~est.mitre.org~ and kind ~EstIssuer~ or ~EstClusterIssuer~.
2. ~cert-manager~ deploys a CertificateRequest resource with the ~issuerRef~ from the Certificate.
3. The operator reads CertificateRequst with ~issuerRef~ of kind ~EstIssuer~ or ~EstClusterIssuer~.
4. The operator reads the issuer and validates that the issuer is marked as ready.
5. The operator creates an EstOrder and sets the CertificateRequest as the owner.
6. The operator updates the CertificateRequest status.
** EstOrder activity
#+BEGIN_SRC plantuml :file images/act-estorder.png :cache yes :results drawer :post caption_wrap("~EstOrder~ activity", *this*)
hide footbox
autonumber
mainframe **act** estorder_create [EstOrder]
control "est-operator" as estoperator
database "EST Portal" as estportal
estoperator -> EstOrder : read
estoperator -> EstIssuer : read
alt initial enrollment
    estoperator -> IssuerSecret : read
    estoperator -> estportal : /simpleenroll [HTTP Basic Auth]
else renew / rekey
    estoperator -> CertificateSecret : read
    estoperator -> estportal : /simplereenroll [TLS client cert]
end
estportal --> estoperator : application/pkcs7
estoperator -> CertificateRequest : update status
estoperator -> EstOrder : update status
#+END_SRC

#+RESULTS[74a35a8e9cd85248d111d22f8e137f955ec097f3]:
:results:
#+CAPTION: ~EstOrder~ activity
[[file:images/act-estorder.png]]
:end:

1. The operator reads the EstOrder.
2. The operator reads the EstIssuer and validates that the issuer is ready to process requests.

If the request is a new Certificate:
3. [@3] The operator reads the issuer credential Secret.
4. The operator calls the ~/simpleenroll~ API on the EST Portal.

If the request is a Certificate renewal or rekey:
5. [@5] The operator reads the Certificate private key.
6. The operator calls the ~/simplereenroll~ API on the EST Portal.

Continuing:
7. [@7] The operator receives a PKCS#7 object with the issued certificate.
8. The operator updates the CertificateRequest with the issued certificate, trust anchor, and status conditions.
9. The operator updates the status of the EstOrder.

The ~cert-manager~ operator watches for updates to the status conditions and updates the Certificate and TLS Secret.
* Deployments
The folowing deployment diagrams describe how ~est-operator~ is deployed.  These deployments can be combined.

For diagram simplicity, the ~Certificate~ resource and the TLS ~Secret~ resource are not shown.  These resources are in the namesapce with the ~CertificateRequest~. 
** Namespaced deployment
~EstIssuer~ is namespace-scoped, and must be deployed in the same namespace where with the ~Certificate~ resources it services.  The issuer ~Secret~ must also be in this namespace.  This deployment services requests /only/ in the Issuer's namespace.  This deployment is useful for private issuers.
#+BEGIN_SRC plantuml :file images/deployment.png :cache yes :results drawer :post caption_wrap("Namespaced deployment", *this*)
skinparam linetype ortho
skinparam ranksep 1
mainframe **dep** est-operator [EstIssuer]
node cluster {
    frame "cert-manager : namespace" as cm_ns {
        component "cert-manager : Deployment" as cm
    }
    frame "application1 : namespace" as app1_ns {
        artifact "app1-request : CertificateRequest" as app1_cr
        artifact "app1-order : EstOrder" as app1_est_o
        artifact "issuer1 : EstIssuer" as est_i
        artifact "estissuer-credential : Secret" as est_i_cred
    }
    frame "est-operator : namespace" as est_ns {
        component "estoperator : Deployment" as estoper
    }
}
cloud "other network" as cloud
' cert-manager deploys certificaterequests
cm o--> app1_cr
' estoperator deploys orders
estoper o-l-> app1_est_o
' estoperator communicates with issuer portals
estoper -0)- cloud : RFC 7030
' certificaterequests own orders
app1_cr *--> app1_est_o
' issuer uses secret
est_i .r.> est_i_cred
' app1 uses issuer
app1_cr ..> est_i
app1_est_o ..> est_i
#+END_SRC

#+RESULTS[66714d68b29274fb9f0dc1565115abe1fc7c0b74]:
:results:
#+CAPTION: Namespaced deployment
[[file:images/deployment.png]]
:end:

** Cluster scoped deployment
~EstClusterIssuer~ is /cluster scoped/ and has no assigned namespace.  It can be used to service requests in any namespace and is used when multiple applications use the same issuer.

The credential secret /MUST/ be in the namespace set in the environment variable ~CLUSTER_SCOPE_NAMESPACE~.  If not set, the the operator will default to namespace "est-operator".
#+BEGIN_SRC plantuml :file images/cluster-deployment.png :cache yes :results drawer :post caption_wrap("Cluster scope deployment", *this*)
skinparam ranksep 1
skinparam linetype ortho
mainframe **dep** est-operator [EstClusterIssuer]
node cluster {
    frame "cert-manager : namespace" as cm_ns {
        component "cert-manager : Deployment" as cm
    }
    frame "est-operator : namespace" as est_ns {
        artifact "estissuer-credential : Secret" as est_i_cred
        component "estoperator : Deployment" as estoper
    }
    artifact "issuer1 : EstClusterIssuer" as est_i  
    frame "application1 : namespace" as app1_ns {
        artifact "app1-request : CertificateRequest" as app1_cr
        artifact "app1-order : EstOrder" as app1_est_o
    }
    frame "application2 : namespace" as app2_ns {
        artifact "app2-request : CertificateRequest" as app2_cr
        artifact "app2-order : EstOrder" as app2_est_o
    }
}
cloud "other network" as cloud
' cert-manager deploys certificaterequests
cm o--> app1_cr
cm o--> app2_cr
' estoperator deploys orders
estoper o--> app1_est_o
estoper o--> app2_est_o
' estoperator communicates with issuer portals
estoper -(0- cloud : RFC 7030
' certificaterequests own orders
app1_cr *--> app1_est_o
app2_cr *--> app2_est_o
' issuer uses secret
est_i ..> est_i_cred
' apps uses same issuer
app1_cr ..> est_i
app1_est_o ..> est_i
app2_cr ..> est_i
app2_est_o ..> est_i
#+END_SRC

#+RESULTS[c8a57e72e5b7e7aa1e137fc85d74466f15e6d0ba]:
:results:
#+CAPTION: Cluster scope deployment
[[file:images/cluster-deployment.png]]
:end:
